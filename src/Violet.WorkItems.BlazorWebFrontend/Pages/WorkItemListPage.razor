@page "/wi/{projectCode}"
@inject WorkItemService WorkItemService
@inject WorkItemDescriptorService WorkItemDescriptorService
@inject NavigationManager NavigationManager
@using WorkItems.Types;
@using WorkItems.Query;

@if (List is not null)
{
    <FluentToolbar style="width:100%;background-color: var(--neutral-layer-2);">
        <FluentButton IconEnd="@(new Icons.Regular.Size16.Home())" Title="Back" OnClick="@(_ => NavigationManager.NavigateTo($"/"))" />
        <FluentDivider Style="height: 16px;" Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>
        <WiqlField Query="@Query" QueryChanged="@QueryChangedAsync"></WiqlField>
        <FluentSpacer />
        <FluentButton id="AddNewWorkItemButton" IconEnd="@(new Icons.Regular.Size16.Add())"
            Title="Add"
            OnClick="@(() => addNewWorkItemMenuOpen = !addNewWorkItemMenuOpen)" />
        <FluentButton id="AddNewWorkItemButton" IconEnd="@(new Icons.Regular.Size16.MoreVertical())"
            Title="Add" />
        <FluentMenu Anchor="AddNewWorkItemButton" @bind-Open="addNewWorkItemMenuOpen">
            @foreach (var type in Types)
            {
                <FluentMenuItem OnClick="(() => NavigateToNewWorkItem(type.Name))">@type.DisplayName</FluentMenuItem>
            }
        </FluentMenu>
    </FluentToolbar>
    <FluentDataGrid Items="@(List.AsQueryable())" TGridItem="WorkItem" OnRowFocus="OnRowFocusExecute">
        <PropertyColumn TGridItem="WorkItem" TProp="string" Property="@(wi=> wi.Id)" Title="Id" Sortable="true" />
        <PropertyColumn TGridItem="WorkItem" TProp="string" Property="@(wi => wi.WorkItemType)" Title="Type" Sortable="true" />
        <PropertyColumn TGridItem="WorkItem" TProp="string" Property="@(wi => wi["Title"].Value)" Title="Title" Sortable="true" />
    </FluentDataGrid>
}
@code {
    private bool addNewWorkItemMenuOpen = false;
    [Parameter]
    public string ProjectCode { get; set; } = default!;
    [Parameter]
    public WorkItemsQuery Query { get; set; } = default!;


    public IEnumerable<WorkItem>? List = null;
    public IEnumerable<WorkItemType> Types = null;

    protected override async Task OnParametersSetAsync()
    {
        Types = (await WorkItemDescriptorService.GetWorkItemTypes(ProjectCode)).Types;

        if (Query is null && ProjectCode is not null)
        {
            Query = new WorkItemsQuery(AndClause.Create(new ProjectClause(ProjectCode)));
        }

        await RefreshData();
    }
    private async Task QueryChangedAsync(WorkItemsQuery query)
    {
        Query = query;

        var data = System.Text.Json.JsonSerializer.Serialize(query, QuerySerialization.GetOptions());

        Console.WriteLine("Updated Query" + data);

        await RefreshData();
    }

    private async Task RefreshData()
    {
        List = await WorkItemService.GetAllWorkItems(Query);
        StateHasChanged();
    }

    public void NavigateToNewWorkItem(string type)
    => NavigationManager.NavigateTo($"/wi/{ProjectCode}/new?type={type}");

    public void OnRowFocusExecute(FluentDataGridRow<WorkItem> e)
    => NavigateToWorkItem(e.Item);

    public void NavigateToWorkItem(WorkItem workItem)
    {
        NavigationManager.NavigateTo($"/wi/{workItem.ProjectCode}/{workItem.Id}");
    }
}
