@page "/wi/{ProjectCode}/{WorkItemId}"
@inject HttpClient Http
@inject WorkItemService WorkItemService
@inject WorkItemDescriptorService WorkItemDescriptorService
@inject NavigationManager NavigationManager
@using Violet.WorkItems.Service.Messages;
@using Violet.WorkItems.Types
@using Violet.WorkItems.Query
@using Violet.WorkItems.BlazorWebFrontend.Shared.Widgets

@if (WorkItemDescriptor is not null)
{
    <MudAppBar Elevation="4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Inherit" Edge="Edge.Start" @onclick="OnBack"></MudIconButton>
        <MudText Typo="Typo.body1">
            @if (WorkItem.TryGetProperty("Title", out var titleProperty))
            {
                <span>@titleProperty.Value</span>
            }
        </MudText>
        <WiqlField Query="@PseudoQuery" IsEditable="false"></WiqlField>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudPaper Elevation="2" Square="true">
        <MudToolBar Dense="true">
            <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Inherit" Edge="Edge.End" @onclick="OnSave"></MudIconButton>
            <MudSpacer />
            @foreach (var command in WorkItemDescriptor.Commands)
            {
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DoubleArrow" Color="Color.Inherit" @onclick="@(e => OnCommand(command))">@command.Label</MudButton>
            }
        </MudToolBar>
    </MudPaper>

    <MudCard Class="ma-4">
        <MudCardHeader>
            <MudText Typo="@Typo.h6">Properties</MudText>
        </MudCardHeader>
        <MudCardContent>
            @foreach (var property in WorkItemDescriptor.Properties)
            {
                <PropertyWidget WorkItem="@WorkItem" WorkItemDescriptor="@WorkItemDescriptor" PropertyDescriptor="@property" WorkItemChanged="@(e => OnPropertyUpdate(e))" />
            }

        </MudCardContent>
    </MudCard>

    <MudCard Class="ma-4">
        <MudCardHeader>
            <MudText Typo="@Typo.h6">History</MudText>
        </MudCardHeader>
        <MudCardContent Class="pa-0">
            <MudTimeline TimelineAlign="TimelineAlign.Start" TimelinePosition="TimelinePosition.Start">
                @foreach (var logEntry in WorkItem.Log.OrderByDescending(l => l.Date))
                {
                    <MudTimelineItem Elevation="0" Variant="Variant.Filled">
                        <ItemContent>
                            <strong>@logEntry.Date.ToString("s")</strong> by @logEntry.User<br />
                            <em>@logEntry.Comment</em>

                            @foreach (var change in logEntry.Changes)
                            {
                                <div>
                                    &gt; @change.Name : @change.OldValue -> @change.NewValue
                                </div>
                            }
                        </ItemContent>
                    </MudTimelineItem>
                }
            </MudTimeline>
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "type")]
    public string WorkItemType { get; set; } = "Bug";

    [Parameter]
    public string ProjectCode { get; set; }
    [Parameter]
    public string WorkItemId { get; set; }

    public WorkItemsQuery PseudoQuery { get; set; } = null;

    public WorkItemDescriptorApiResponse WorkItemDescriptor;
    public WorkItem WorkItem { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        if (WorkItemId.ToLowerInvariant() == "new")
        {
            WorkItemDescriptor = await WorkItemDescriptorService.GetWorkItemDescriptorByWorkItemType(ProjectCode, WorkItemType);

            WorkItem = await WorkItemService.GetTemplateAsync(ProjectCode, WorkItemType);
        }
        else
        {
            WorkItemDescriptor = await WorkItemDescriptorService.GetWorkItemDescriptorByWorkItemId(ProjectCode, WorkItemId);

            WorkItem = await WorkItemService.GetWorkItemAsync(ProjectCode, WorkItemId);
        }

        PseudoQuery = new WorkItemsQuery(AndClause.Create(new WorkItemIdClause(WorkItem.Id), new ProjectClause(WorkItem.ProjectCode), new WorkItemTypeClause(WorkItem.WorkItemType)));
    }

    public async Task OnPropertyUpdate(WorkItem workItem)
    {
        WorkItem = workItem;
    }

    public async Task OnCommand(CommandDescriptor command)
    {
        WorkItem = await WorkItemService.ExecuteCommandAsync(ProjectCode, WorkItem.Id, command.Name);

        WorkItemDescriptor = await WorkItemDescriptorService.GetWorkItemDescriptorByWorkItemId(ProjectCode, WorkItemId);
    }

    public async Task OnSave()
    {
        if (WorkItemId.ToLowerInvariant() == "new")
        {
            var result = await WorkItemService.CreateWorkItemAsync(ProjectCode, WorkItem.WorkItemType,
            WorkItem.Properties);

            NavigationManager.NavigateTo($"/wi/{result.ProjectCode}/{result.Id}");
        }
        else
        {
            var result = await WorkItemService.UpdateWorkItemAsync(WorkItem, "Awesome");

            WorkItem = result;
            WorkItemId = result.Id;

            WorkItemDescriptor = await WorkItemDescriptorService.GetWorkItemDescriptorByWorkItemId(ProjectCode, WorkItemId);
        }
    }

    public async Task OnBack()
    {
        NavigationManager.NavigateTo($"/wi/{ProjectCode}");
    }
}