@page "/wi/{ProjectCode}/{WorkItemId}"
@inject HttpClient Http
@inject WorkItemService WorkItemService
@inject WorkItemDescriptorService WorkItemDescriptorService
@inject NavigationManager NavigationManager
@using Violet.WorkItems.Service.Messages;
@using Violet.WorkItems.Types
@using Violet.WorkItems.Query
@using Violet.WorkItems.BlazorWebFrontend.Shared.Widgets

@if (WorkItemDescriptor is not null)
{
        <PageTitle>
        @WorkItemId
        @if (WorkItem.TryGetProperty("Title", out var titleProperty))
        {
            <text> - @titleProperty.Value</text>
        }
        </PageTitle>
        <FluentToolbar style="width:100%;background-color: var(--neutral-layer-2);">
            <FluentButton IconEnd="@(new Icons.Regular.Size16.ArrowLeft())" Title="Back" OnClick="@(_ => NavigationManager.NavigateTo($"/wi/{ProjectCode}"))" />
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Save())"
                Title="Save"
                OnClick="OnSave" />
            @foreach (var command in WorkItemDescriptor.Commands)
            {
                <FluentButton IconStart="@(new Icons.Regular.Size16.ArrowRight())" OnClick="@(e => OnCommand(command))">@command.Label</FluentButton>
            }
            <FluentDivider Style="height: 16px;" Role="DividerRole.Presentation" Orientation="Orientation.Vertical" ></FluentDivider>
            <WiqlField Query="@PseudoQuery" IsEditable="false"></WiqlField>
            <FluentDivider Style="height: 16px;" Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>
            <FluentLabel Typo="Typography.Subject">
                @if (WorkItem.TryGetProperty("Title", out var titleProperty))
                {
                    <span>@titleProperty.Value</span>
                }
            </FluentLabel>

            <FluentSpacer />
            <FluentButton id="AddNewWorkItemButton" IconEnd="@(new Icons.Regular.Size16.MoreVertical())"
                Title="Add"
                OnClick="@(() => addNewWorkItemMenuOpen = !addNewWorkItemMenuOpen)" />
        </FluentToolbar>

        <FluentTabs>
            <FluentTab Label="Properties" style="border:calc(var(--stroke-width) * 1px) solid var(--neutral-stroke-rest);border-radius:calc(var(--control-corner-radius) * 1px);padding:1rem 1rem;margin:0 6px 0 6px">
                <FluentStack Orientation="Orientation.Vertical">
                @foreach (var property in WorkItemDescriptor.Properties)
                {
                            <div>
                                <PropertyWidget WorkItem="@WorkItem" WorkItemDescriptor="@WorkItemDescriptor" PropertyDescriptor="@property" WorkItemChanged="@(e => OnPropertyUpdate(e))" />
                            </div>
                }
                </FluentStack>
            </FluentTab>

            <FluentTab Label="History">
                <FluentStack Orientation="Orientation.Vertical">
                @foreach (var logEntry in WorkItem.Log.OrderByDescending(l => l.Date))
                {
                            <strong>@logEntry.Date.ToString("s")</strong>
                    <text>by</text>
                    @logEntry.User
                            <br />
                            <em>@logEntry.Comment</em>

                    @foreach (var change in logEntry.Changes)
                    {
                                    <div>
                                        &gt; @change.Name : @change.OldValue -> @change.NewValue
                                    </div>
                    }
                            <FluentDivider Style="width: 100%;" Role="DividerRole.Presentation"></FluentDivider>
                }
                </FluentStack>
            </FluentTab>
        </FluentTabs>

}

@code {
    private bool addNewWorkItemMenuOpen = false;
    [Parameter]
    [SupplyParameterFromQuery(Name = "type")]
    public string WorkItemType { get; set; } = "Bug";

    [Parameter]
    public string ProjectCode { get; set; }
    [Parameter]
    public string WorkItemId { get; set; }

    public WorkItemsQuery PseudoQuery { get; set; } = null;

    public WorkItemDescriptorApiResponse WorkItemDescriptor;
    public WorkItem WorkItem { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        if (WorkItemId.ToLowerInvariant() == "new")
        {
            WorkItemDescriptor = await WorkItemDescriptorService.GetWorkItemDescriptorByWorkItemType(ProjectCode, WorkItemType);

            WorkItem = await WorkItemService.GetTemplateAsync(ProjectCode, WorkItemType);
        }
        else
        {
            WorkItemDescriptor = await WorkItemDescriptorService.GetWorkItemDescriptorByWorkItemId(ProjectCode, WorkItemId);

            WorkItem = await WorkItemService.GetWorkItemAsync(ProjectCode, WorkItemId);
        }

        PseudoQuery = new WorkItemsQuery(AndClause.Create(new WorkItemIdClause(WorkItem.Id), new ProjectClause(WorkItem.ProjectCode), new WorkItemTypeClause(WorkItem.WorkItemType)));
    }

    public async Task OnPropertyUpdate(WorkItem workItem)
    {
        WorkItem = workItem;
    }

    public async Task OnCommand(CommandDescriptor command)
    {
        WorkItem = await WorkItemService.ExecuteCommandAsync(ProjectCode, WorkItem.Id, command.Name);

        WorkItemDescriptor = await WorkItemDescriptorService.GetWorkItemDescriptorByWorkItemId(ProjectCode, WorkItemId);
    }

    public async Task OnSave()
    {
        if (WorkItemId.ToLowerInvariant() == "new")
        {
            var result = await WorkItemService.CreateWorkItemAsync(ProjectCode, WorkItem.WorkItemType,
            WorkItem.Properties);

            NavigationManager.NavigateTo($"/wi/{result.ProjectCode}/{result.Id}");
        }
        else
        {
            var result = await WorkItemService.UpdateWorkItemAsync(WorkItem, "Awesome");

            WorkItem = result;
            WorkItemId = result.Id;

            WorkItemDescriptor = await WorkItemDescriptorService.GetWorkItemDescriptorByWorkItemId(ProjectCode, WorkItemId);
        }
    }
}