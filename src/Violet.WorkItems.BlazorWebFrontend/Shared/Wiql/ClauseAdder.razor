@using Violet.WorkItems.Query
@inherits WiqlBaseComponent

<FluentListbox TOption="string" style="height:200px;">
    @if (WorkItemTypes is not null && WorkItemDescriptor is null)
    {
        <FluentOption TOption="string" @onclick="AddWorkItemClauseAsync" Value="property:WorkItemType">Type</FluentOption>
    }
    else if (WorkItemDescriptor is not null)
    {
        @foreach (var property in WorkItemDescriptor.Properties)
        {
            if (property.ValueProvider is not null)
            {
                <FluentOption @onclick="@(async _ => await AddValueMatchClauseAsync(property.Name))" Value="@("property:" + property.Name)">@property.Label</FluentOption>
            }
            else
            {
                <FluentOption @onclick="@(async _ => await AddStringMatchClauseAsync(property.Name))" Value="@("property:" + property.Name)">@property.Label</FluentOption>
            }
        }
    }
</FluentListbox>

@code {
    protected Task AddWorkItemClauseAsync()
    => AddClauseAsync(new WorkItemTypeClause(null));
    protected Task AddValueMatchClauseAsync(string propertyName)
    => AddClauseAsync(new ValueMatchClause(propertyName, [], true));
    protected Task AddStringMatchClauseAsync(string propertyName)
        => AddClauseAsync(new StringMatchClause(propertyName, null, false));

    protected Task AddPropertyClauseAsync(string propertyName, string? value)
    => AddClauseAsync(new ValueMatchClause(propertyName, value is null ? Array.Empty<string>() : new[] { value }, true));
    protected Task AddWorkItemTypeClauseAsync(string projectCode, string workItemType)
    => AddClauseAsync(new WorkItemTypeClause(workItemType));
}